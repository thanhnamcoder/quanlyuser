from PyQt5.QtCore import QThread, pyqtSignal
import requests
import time
from datetime import datetime, timedelta
import pytz
import re 
import uiautomator2 as u2
import subprocess
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
import shlex
from mailTm import MailTM

DEFAULT_PASSWORD = "Nguyen2004nam@"
class MultiDeviceRunner:
    def __init__(self, devices, email=None):
        """
        Kh·ªüi t·∫°o MultiDeviceRunner.

        Args:
            devices (list): Danh s√°ch device_id.
            email (str): Email (ch·ªâ d√πng cho task_type = "code").
        """
        self.devices = devices
        self.email = email
        self.adb_module = AdbModule()
        self._stop_event = threading.Event()
        self.thread = None


    def run_in_background(self):
        """
        H√†m n√†y s·∫Ω ch·∫°y c√°c nhi·ªám v·ª• tr√™n c√°c thi·∫øt b·ªã trong m·ªôt lu·ªìng ri√™ng bi·ªát
        ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ·ª©ng d·ª•ng ch√≠nh.
        """
        self.thread = threading.Thread(target=self.run)
        self.thread.start()

    def stop(self):
        self._stop_event.set()
        if self.thread:
            self.thread.join()
    def run(self):
        """
        H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông tr√™n t·∫•t c·∫£ thi·∫øt b·ªã c√πng l√∫c.
        L·∫∑p l·∫°i li√™n t·ª•c: sau m·ªói v√≤ng ch·∫°y h·∫øt t·∫•t c·∫£ nhi·ªám v·ª•, ƒë·ª£i 2 gi√¢y r·ªìi ch·∫°y l·∫°i.
        """
        while not self._stop_event.is_set():  # ‚úÖ S·ª≠a t·∫°i ƒë√¢y
            print("B·∫Øt ƒë·∫ßu v√≤ng nhi·ªám v·ª• m·ªõi...")

            with ThreadPoolExecutor(max_workers=len(self.devices)) as executor:
                future_to_device = {
                    executor.submit(self.run_tasks_on_device, device_id): device_id
                    for device_id in self.devices
                }

                for future in as_completed(future_to_device):
                    device_id = future_to_device[future]
                    try:
                        result = future.result()
                        print(f"[{device_id}] {result}")
                    except Exception as e:
                        print(f"[{device_id}] L·ªói khi th·ª±c hi·ªán nhi·ªám v·ª• tr√™n {device_id}: {e}")

            print("ƒê√£ ho√†n th√†nh t·∫•t c·∫£ nhi·ªám v·ª•, ch·ªù 2 gi√¢y tr∆∞·ªõc khi ti·∫øp t·ª•c...\n")
            time.sleep(2)

        print("üõë ƒê√£ d·ª´ng MultiDeviceRunner.")



    def run_tasks_on_device(self, device_id):
        """
        Ch·∫°y c√°c nhi·ªám v·ª• cho t·ª´ng thi·∫øt b·ªã: nh·∫•n home, click comment button, v.v.
        
        Args:
            device_id (str): ID c·ªßa thi·∫øt b·ªã Android.
        """
        try:
            # Nh·∫•n n√∫t Comment
            # comment_result = self.click_comment_button(device_id)
            self.press_home_on_device(device_id)
            # print(f"[{device_id}] {comment_result}")

            return f"Ho√†n th√†nh nhi·ªám v·ª• tr√™n {device_id}"
        except Exception as e:
            return f"L·ªói khi th·ª±c hi·ªán nhi·ªám v·ª• tr√™n {device_id}: {e}"

    def press_home_on_device(self, device_id):
        """
        Nh·∫•n n√∫t Home tr√™n thi·∫øt b·ªã Android.

        Args:
            device_id (str): ID c·ªßa thi·∫øt b·ªã Android.
        """
        try:
            # K·∫øt n·ªëi v·ªõi thi·∫øt b·ªã qua uiautomator2
            device = u2.connect(device_id)
            # Nh·∫•n n√∫t Home
            device.press("home")
            return f"ƒê√£ nh·∫•n n√∫t Home tr√™n thi·∫øt b·ªã {device_id}."
        except Exception as e:
            raise Exception(f"L·ªói khi nh·∫•n n√∫t Home tr√™n {device_id}: {e}")

    def click_comment_button(self, device_id):
        """
        T√¨m v√† click v√†o button c√≥ contentDescription='ƒêƒÉng b√¨nh lu·∫≠n' trong FrameLayout index=3, sau ƒë√≥ b·∫•m back 3 l·∫ßn, c√°ch nhau 1 gi√¢y.
        
        Args:
            device_id (str): ID c·ªßa thi·∫øt b·ªã Android.
        """
        try:
            # K·∫øt n·ªëi v·ªõi thi·∫øt b·ªã qua uiautomator2
            device = u2.connect(device_id)

            # T√¨m FrameLayout ch·ª©a n√∫t 'ƒêƒÉng b√¨nh lu·∫≠n'
            frame_layout = device.xpath('//android.widget.FrameLayout[@index="3"]')
            if frame_layout.exists:
                buttons = frame_layout.child('//android.widget.Button')

                for button in buttons.all():
                    info = button.info
                    content_desc = info.get("contentDescription", "")

                    if content_desc == "ƒêƒÉng b√¨nh lu·∫≠n":
                        print(f"[{device_id}] T√¨m th·∫•y n√∫t 'ƒêƒÉng b√¨nh lu·∫≠n', ƒë·ª£i 2 gi√¢y tr∆∞·ªõc khi click...")
                        time.sleep(2)  # ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi click
                        button.click()
                        print(f"[{device_id}] ƒê√£ click v√†o n√∫t 'ƒêƒÉng b√¨nh lu·∫≠n'")
                        
                        # B·∫•m back 3 l·∫ßn sau khi click
                        for _ in range(3):
                            device.press("back")
                            time.sleep(1)  # ƒê·ª£i 1 gi√¢y gi·ªØa m·ªói l·∫ßn back
                        
                        return "N√∫t 'ƒêƒÉng b√¨nh lu·∫≠n' ƒë√£ ƒë∆∞·ª£c click v√† back 3 l·∫ßn."
            else:
                return f"[{device_id}] Kh√¥ng t√¨m th·∫•y FrameLayout index=3 ho·∫∑c n√∫t 'ƒêƒÉng b√¨nh lu·∫≠n'."
        except Exception as e:
            return f"[{device_id}] L·ªói khi t√¨m v√† click n√∫t 'ƒêƒÉng b√¨nh lu·∫≠n': {e}"


class AdbModule:
    """
    Module qu·∫£n l√Ω c√°c thao t√°c v·ªõi ADB v√† uiautomator2
    """
    
    def __init__(self):
        """
        Kh·ªüi t·∫°o AdbModule
        """
        # Thi·∫øt l·∫≠p logging
        self.logger = logging.getLogger("AdbModule")
        if not self.logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)


    def paste_text_to_device(self, text, device_id):
        # L·∫•y n·ªôi dung t·ª´ QLineEdit
        text_to_paste = text
        
        # Thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng '%s'
        text_to_paste = text_to_paste.replace(' ', '%s')
        
        # X·ª≠ l√Ω c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† d·∫•u ti·∫øng Vi·ªát
        special_chars = {
            '√°': 'a\u0301', '√†': 'a\u0300', '·∫£': 'a\u0309', '√£': 'a\u0303', '·∫°': 'a\u0323',
            '·∫Ø': 'ƒÉ\u0301', '·∫±': 'ƒÉ\u0300', '·∫≥': 'ƒÉ\u0309', '·∫µ': 'ƒÉ\u0303', '·∫∑': 'ƒÉ\u0323',
            '·∫•': '√¢\u0301', '·∫ß': '√¢\u0300', '·∫©': '√¢\u0309', '·∫´': '√¢\u0303', '·∫≠': '√¢\u0323',
            '√©': 'e\u0301', '√®': 'e\u0300', '·∫ª': 'e\u0309', '·∫Ω': 'e\u0303', '·∫π': 'e\u0323',
            '·∫ø': '√™\u0301', '·ªÅ': '√™\u0300', '·ªÉ': '√™\u0309', '·ªÖ': '√™\u0303', '·ªá': '√™\u0323',
            '√≠': 'i\u0301', '√¨': 'i\u0300', '·ªâ': 'i\u0309', 'ƒ©': 'i\u0303', '·ªã': 'i\u0323',
            '√≥': 'o\u0301', '√≤': 'o\u0300', '·ªè': 'o\u0309', '√µ': 'o\u0303', '·ªç': 'o\u0323',
            '·ªë': '√¥\u0301', '·ªì': '√¥\u0300', '·ªï': '√¥\u0309', '·ªó': '√¥\u0303', '·ªô': '√¥\u0323',
            '·ªõ': '∆°\u0301', '·ªù': '∆°\u0300', '·ªü': '∆°\u0309', '·ª°': '∆°\u0303', '·ª£': '∆°\u0323',
            '√∫': 'u\u0301', '√π': 'u\u0300', '·ªß': 'u\u0309', '≈©': 'u\u0303', '·ª•': 'u\u0323',
            '·ª©': '∆∞\u0301', '·ª´': '∆∞\u0300', '·ª≠': '∆∞\u0309', '·ªØ': '∆∞\u0303', '·ª±': '∆∞\u0323',
            '√Ω': 'y\u0301', '·ª≥': 'y\u0300', '·ª∑': 'y\u0309', '·ªπ': 'y\u0303', '·ªµ': 'y\u0323',
        }
        
        # Chuy·ªÉn ƒë·ªïi c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
        for char in special_chars:
            text_to_paste = text_to_paste.replace(char, special_chars[char])
            text_to_paste = text_to_paste.replace(char.upper(), special_chars[char].upper())

        try:
            # D√°n n·ªôi dung v√†o thi·∫øt b·ªã qua ADB
            process = subprocess.run(
                ["adb", "-s", device_id, "shell", "input", "text", text_to_paste],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=10
            )
            
            # N·∫øu c√≥ kho·∫£ng tr·∫Øng, th√™m l·ªánh space
            if '%s' in text_to_paste:
                time.sleep(0.5)
                spaces = text_to_paste.count('%s')
                for _ in range(spaces):
                    subprocess.run(
                        ["adb", "-s", device_id, "shell", "input", "keyevent", "62"],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        timeout=10
                    )
                    time.sleep(0.2)
                    
        except subprocess.TimeoutExpired:
            print("ADB command timed out")
        except Exception as e:
            print(f"Error: {str(e)}")
            
        time.sleep(1)


    def get_username(self, device_id):
        """
        L·∫•y username t·ª´ thi·∫øt b·ªã v·ªõi t·ªëc ƒë·ªô t√¨m ki·∫øm ƒë∆∞·ª£c t·ªëi ∆∞u
        
        Args:
            device_id (str): ID c·ªßa thi·∫øt b·ªã Android
            
        Returns:
            str: Username b·∫Øt ƒë·∫ßu b·∫±ng '@' (ƒë√£ lo·∫°i b·ªè '@'), 
                ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        try:
            device = u2.connect(device_id)
            
            # T√¨m layout v·ªõi timeout
            layout = device(className="android.widget.LinearLayout", instance=2)
            if not layout.exists:
                self.logger.warning(f"Kh√¥ng t√¨m th·∫•y LinearLayout tr√™n thi·∫øt b·ªã {device_id}")
                return None
                
            # T·ªëi ∆∞u t√¨m ki·∫øm text
            children = layout.child()
            
            # T√¨m nhanh v·ªõi generator expression
            for child in children:
                if text := child.info.get('text'):
                    if text.startswith('@'):
                        username = text.lstrip('@')
                        self.logger.info(f"ƒê√£ t√¨m th·∫•y username: {username}")
                        return username  # Tr·∫£ v·ªÅ username ƒë·∫ßu ti√™n t√¨m th·∫•y
            
            self.logger.warning(f"Kh√¥ng t√¨m th·∫•y text b·∫Øt ƒë·∫ßu b·∫±ng '@' tr√™n thi·∫øt b·ªã {device_id}")
            return None
            
        except Exception as e:
            self.logger.error(f"L·ªói khi l·∫•y username t·ª´ thi·∫øt b·ªã {device_id}: {e}")
            return None
    def get_connected_devices(self):
        """
        L·∫•y danh s√°ch t·∫•t c·∫£ c√°c thi·∫øt b·ªã ƒë∆∞·ª£c k·∫øt n·ªëi qua ADB.
        
        :return: Danh s√°ch c√°c thi·∫øt b·ªã, m·ªói thi·∫øt b·ªã l√† m·ªôt tuple g·ªìm (device_id, device_name)
        """
        try:
            # Ch·∫°y l·ªánh adb devices ƒë·ªÉ l·∫•y danh s√°ch thi·∫øt b·ªã
            result = subprocess.run(['adb', 'devices'], capture_output=True, text=True)
            
            # Ki·ªÉm tra n·∫øu c√≥ l·ªói khi ch·∫°y l·ªánh
            if result.returncode != 0:
                raise Exception("ADB command failed")

            # L·ªçc c√°c thi·∫øt b·ªã t·ª´ ƒë·∫ßu ra c·ªßa l·ªánh adb devices
            devices = []
            for line in result.stdout.splitlines():
                if line.strip() and line != "List of devices attached":
                    device_id = line.split()[0]  # Device ID ·ªü c·ªôt ƒë·∫ßu ti√™n
                    device_name = line.split()[1] if len(line.split()) > 1 else ""  # N·∫øu c√≥ t√™n thi·∫øt b·ªã
                    devices.append((device_id))

            return devices
        except Exception as e:
            print(f"L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã ADB: {e}")
            return []
class RunThread(QThread):
    finished_signal = pyqtSignal(object)

    def __init__(self, task_type="code", email=None, username=None, adb_module=None, device_id=None, parent=None):
        super().__init__(parent)
        self.task_type = task_type
        self.email = email
        self.username = username
        self.adb_module = adb_module
        self.device_id = device_id
        self.mail_tm = MailTM()
        self.is_running = True  # ‚úÖ C·∫ßn d√≤ng n√†y ·ªü ƒë√¢y

    def run(self):
        if self.task_type == "code":
            self.run_get_code()

        elif self.task_type == "username":
            self.run_get_username()

        elif self.task_type == "email":
            result = self.run_get_mail()  # G·ªçi v√† l∆∞u k·∫øt qu·∫£
            self.finished_signal.emit(result)  # Emit dict

        else:
            self.finished_signal.emit({
                "status": "error",
                "message": "‚ùå Nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá.",
                "email": ""
            })


    def create_email_account(self, username):
        """
        T·∫°o ƒë·ªãa ch·ªâ email m·ªõi t·ª´ username
        """
        default_password = "Nguyen2004nam@"

        try:
            domain = self.mail_tm.get_domains()
            if not domain:
                return {"status": "error", "message": "Kh√¥ng th·ªÉ l·∫•y domain t·ª´ API mail.tm!"}

            clean_username = username.replace('.', '')
            new_email = f"{clean_username}@{domain}"

            result = self.mail_tm.create_account(new_email, default_password)

            response = {
                "status": result,
                "email": new_email,
                "password": default_password,
            }

            if result == "created":
                response["message"] = f"‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n email: {new_email}"
            elif result == "exists":
                response["message"] = f"‚ö†Ô∏è Email {new_email} ƒë√£ t·ªìn t·∫°i."
            elif result == "too_many_requests":
                response["message"] = "‚õî Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau."
            else:
                response["message"] = f"‚ùå Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n email: {new_email}"

            return response

        except Exception as e:
            print("L·ªói khi t·∫°o email:", e)
            return {
                "status": "error",
                "message": f"‚ùå L·ªói khi t·∫°o email: {str(e)}"
            }


    def run_get_mail(self):
        if not self.username:
            return {
                "status": "error",
                "message": "‚ö†Ô∏è Kh√¥ng c√≥ username.",
                "email": ""
            }

        print(f"[RUN] ƒêang t·∫°o email cho username: {self.username}")
        mail = self.create_email_account(self.username)
        return mail  # Tr·∫£ v·ªÅ dict


            
    def run_get_code(self):
        if not self.email:
            self.finished_signal.emit("Kh√¥ng c√≥ email.")
            return

        print(self.email)
        password = "Nguyen2004nam@"  # M·∫∑c ƒë·ªãnh, n√™n cho truy·ªÅn v√†o n·∫øu c√≥ th·ªÉ
        token = self.mail_tm.get_token(self.email, password)

        if token:
            print(f"Token ƒë√£ ƒë∆∞·ª£c l·∫•y: {token}")
            key = self.fetch_emails_multiple_times(token)
            if key:
                self.finished_signal.emit(key)
            else:
                self.finished_signal.emit("Kh√¥ng th·ªÉ t√¨m th·∫•y m√£ s·ªë 6 ch·ªØ s·ªë!")
        else:
            self.finished_signal.emit("Kh√¥ng th·ªÉ l·∫•y token t·ª´ email!")

    def run_get_username(self):
        if not self.device_id or not self.adb_module:
            self.finished_signal.emit("Thi·∫øt b·ªã kh√¥ng h·ª£p l·ªá.")
            return

        username = self.adb_module.get_username(self.device_id)
        self.finished_signal.emit(username)



    def fetch_emails_multiple_times(self, token):
        """
        L·∫•y danh s√°ch email trong v√≤ng 5 ph√∫t g·∫ßn nh·∫•t v√† tr·∫£ v·ªÅ m√£ s·ªë 6 ch·ªØ s·ªë ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c.
        """
        for i in range(5):
            print(f"L·∫ßn g·ªçi th·ª© {i+1}:")
            subjects = self.mail_tm.get_emails(token)

            if subjects:
                # S·ª≠ d·ª•ng regular expression ƒë·ªÉ tr√≠ch xu·∫•t m√£ s·ªë 6 ch·ªØ s·ªë
                numbers = [re.findall(r'\d{6}', subject) for subject in subjects]
                numbers = [item for sublist in numbers for item in sublist]  # K·∫øt h·ª£p c√°c s·ªë l·∫°i th√†nh m·ªôt danh s√°ch ph·∫≥ng

                if numbers:
                    key = numbers[0]  # L·∫•y m√£ s·ªë ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c
                    return key
            if not self.is_running:
                return "Qu√° tr√¨nh b·ªã h·ªßy!"
            time.sleep(1)

    def stop(self):
        """
        D·ª´ng qu√° tr√¨nh khi c·∫ßn.
        """
        self.is_running = False